{"ast":null,"code":"import { parseColor } from './colors.js';\nimport { set } from './helpers.js';\n/**\n * Convert to hexadecimal value.\n * @param c\n * @returns\n */\nfunction componentToHex(c) {\n  const hex = c.toString(16);\n  return hex.length == 1 ? '0' + hex : hex;\n}\n/**\n * Convert from color object to hex value.\n * @param value\n * @returns\n */\nfunction rgbToHex(value) {\n  return '#' + componentToHex(value.r) + componentToHex(value.g) + componentToHex(value.b);\n}\n/**\n * Conver from hex to color object.\n * @param hex\n * @returns\n */\nfunction hexToRgb(hex) {\n  let data = parseInt(hex[0] != '#' ? hex : hex.substring(1), 16);\n  return {\n    r: data >> 16 & 255,\n    g: data >> 8 & 255,\n    b: data & 255\n  };\n}\n/**\n * Helper method for scale value.\n * @param n\n * @returns\n */\nfunction toUnitVector(n) {\n  return Math.round(n / 255 * 1000) / 1000;\n}\n/**\n * Helper method for scale value.\n * @param n\n * @returns\n */\nfunction fromUnitVector(n) {\n  return Math.round(n * 255);\n}\n/**\n * Convert hex color to lottie representation.\n * @param hex\n * @returns\n */\nexport function hexToLottieColor(hex) {\n  const {\n    r,\n    g,\n    b\n  } = hexToRgb(hex);\n  return [toUnitVector(r), toUnitVector(g), toUnitVector(b)];\n}\n/**\n * Conver lottie color representation to hex.\n * @param value\n * @returns\n */\nexport function lottieColorToHex(value) {\n  const color = {\n    r: fromUnitVector(value[0]),\n    g: fromUnitVector(value[1]),\n    b: fromUnitVector(value[2])\n  };\n  return rgbToHex(color);\n}\n/**\n * Return all supported customizable properties.\n * @param data Icon data.\n * @param options Options.\n * @returns\n */\nexport function properties(data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const result = [];\n  const {\n    lottieInstance\n  } = options;\n  if (!data || !data.layers) {\n    return result;\n  }\n  data.layers.forEach((layer, layerIndex) => {\n    if (!layer.nm || !layer.ef || !layer.nm.toLowerCase().includes('change')) {\n      return;\n    }\n    layer.ef.forEach((field, fieldIndex) => {\n      const value = field?.ef?.[0]?.v?.k;\n      if (value === undefined) {\n        return;\n      }\n      let path;\n      if (lottieInstance) {\n        path = `renderer.elements.${layerIndex}.effectsManager.effectElements.${fieldIndex}.effectElements.0.p.v`;\n      } else {\n        path = `layers.${layerIndex}.ef.${fieldIndex}.ef.0.v.k`;\n      }\n      let type;\n      if (field.mn === 'ADBE Color Control') {\n        type = 'color';\n      } else if (field.mn === 'ADBE Slider Control') {\n        type = 'slider';\n      } else if (field.mn === 'ADBE Point Control') {\n        type = 'point';\n      } else if (field.mn === 'ADBE Checkbox Control') {\n        type = 'checkbox';\n      }\n      if (!type) {\n        return;\n      }\n      const name = field.nm.toLowerCase();\n      result.push({\n        name,\n        path,\n        value,\n        type\n      });\n    });\n  });\n  return result;\n}\n/**\n * Reset data by indicated properties.\n * @param data\n * @param properties\n */\nexport function resetProperties(data, properties) {\n  for (const property of properties) {\n    set(data, property.path, property.value);\n  }\n}\n/**\n * Update data to value by indicated properties.\n * @param data\n * @param properties\n * @param value\n * @param param3\n */\nexport function updateProperties(data, properties, value) {\n  let {\n    scale\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  for (const property of properties) {\n    if (property.type === 'color') {\n      if (typeof value === 'object' && 'r' in value && 'g' in value && 'b' in value) {\n        set(data, property.path, [toUnitVector(value.r), toUnitVector(value.g), toUnitVector(value.b)]);\n      } else if (Array.isArray(value)) {\n        set(data, property.path, value);\n      } else if (typeof value === 'string') {\n        set(data, property.path, hexToLottieColor(parseColor(value)));\n      }\n    } else if (property.type === 'point') {\n      let ratio = 1;\n      if (scale) {\n        ratio = (property.value[0] + property.value[1]) / 2 / scale;\n      }\n      if (typeof value === 'object' && 'x' in value && 'y' in value) {\n        set(data, property.path + '.0', value.x * ratio);\n        set(data, property.path + '.1', value.y * ratio);\n      } else if (Array.isArray(value)) {\n        set(data, property.path + '.0', value[0] * ratio);\n        set(data, property.path + '.1', value[1] * ratio);\n      }\n    } else {\n      let ratio = 1;\n      if (scale) {\n        ratio = property.value / scale;\n      }\n      set(data, property.path, value * ratio);\n    }\n  }\n}","map":{"version":3,"names":["parseColor","set","componentToHex","c","hex","toString","length","rgbToHex","value","r","g","b","hexToRgb","data","parseInt","substring","toUnitVector","n","Math","round","fromUnitVector","hexToLottieColor","lottieColorToHex","color","properties","options","arguments","undefined","result","lottieInstance","layers","forEach","layer","layerIndex","nm","ef","toLowerCase","includes","field","fieldIndex","v","k","path","type","mn","name","push","resetProperties","property","updateProperties","scale","Array","isArray","ratio","x","y"],"sources":["../../src/utils/lottie.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}