{"ast":null,"code":"/**\n * Deep clone of value.\n * @param value\n */\nexport function deepClone(value) {\n  return JSON.parse(JSON.stringify(value));\n}\n/**\n * Check value is null or undefined.\n * @param value\n * @returns\n */\nexport function isNil(value) {\n  return value === null || value === undefined;\n}\n/**\n * Checks if value is object-like. A value is object-like if it\"s not null and has a typeof result of \"object\".\n * @param value\n */\nexport function isObjectLike(value) {\n  return value !== null && typeof value === \"object\";\n}\n/**\n * Checks if path is a direct property of object.\n * @param object\n * @param path\n */\nexport function has(object, path) {\n  const newPath = Array.isArray(path) ? path : path.split(\".\");\n  let current = object;\n  for (const key of newPath) {\n    if (!isObjectLike(current)) {\n      return false;\n    }\n    if (!(key in current)) {\n      return false;\n    }\n    current = current[key];\n  }\n  return true;\n}\n/**\n * Get object value from path. Otherwise return defaultValue.\n * @param object\n * @param path\n * @param defaultValue\n */\nexport function get(object, path, defaultValue) {\n  const newPath = Array.isArray(path) ? path : path.split(\".\");\n  let current = object;\n  for (const key of newPath) {\n    if (!isObjectLike(current)) {\n      return defaultValue;\n    }\n    if (!(key in current)) {\n      return defaultValue;\n    }\n    current = current[key];\n  }\n  return current === undefined ? defaultValue : current;\n}\n/**\n * Update object value on path.\n * @param object\n * @param path\n * @param value\n */\nexport function set(object, path, value) {\n  let current = object;\n  const newPath = Array.isArray(path) ? path : path.split(\".\");\n  for (let i = 0; i < newPath.length; ++i) {\n    if (i === newPath.length - 1) {\n      current[newPath[i]] = value;\n    } else {\n      current = current[newPath[i]];\n    }\n  }\n}","map":{"version":3,"names":["deepClone","value","JSON","parse","stringify","isNil","undefined","isObjectLike","has","object","path","newPath","Array","isArray","split","current","key","get","defaultValue","set","i","length"],"sources":["../../src/utils/helpers.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;AAIA,OAAM,SAAUA,SAASA,CAACC,KAAU;EAChC,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,KAAK,CAAC,CAAC;AAC5C;AAEA;;;;;AAKA,OAAM,SAAUI,KAAKA,CAACJ,KAAU;EAC5B,OAAOA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKK,SAAS;AAChD;AAEA;;;;AAIA,OAAM,SAAUC,YAAYA,CAACN,KAAU;EACnC,OAAOA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ;AACtD;AAEA;;;;;AAKA,OAAM,SAAUO,GAAGA,CAAIC,MAAS,EAAEC,IAAuB;EACrD,MAAMC,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAGA,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC;EAC5D,IAAIC,OAAO,GAAQN,MAAM;EAEzB,KAAK,MAAMO,GAAG,IAAIL,OAAO,EAAE;IACvB,IAAI,CAACJ,YAAY,CAACQ,OAAO,CAAC,EAAE;MACxB,OAAO,KAAK;;IAGhB,IAAI,EAAEC,GAAG,IAAID,OAAO,CAAC,EAAE;MACnB,OAAO,KAAK;;IAGhBA,OAAO,GAAIA,OAAe,CAACC,GAAG,CAAC;;EAGnC,OAAO,IAAI;AACf;AAEA;;;;;;AAMA,OAAM,SAAUC,GAAGA,CAAIR,MAAS,EAAEC,IAAuB,EAAEQ,YAAkB;EACzE,MAAMP,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAGA,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC;EAC5D,IAAIC,OAAO,GAAQN,MAAM;EAEzB,KAAK,MAAMO,GAAG,IAAIL,OAAO,EAAE;IACvB,IAAI,CAACJ,YAAY,CAACQ,OAAO,CAAC,EAAE;MACxB,OAAOG,YAAY;;IAGvB,IAAI,EAAEF,GAAG,IAAID,OAAO,CAAC,EAAE;MACnB,OAAOG,YAAY;;IAGvBH,OAAO,GAAIA,OAAe,CAACC,GAAG,CAAC;;EAGnC,OAAOD,OAAO,KAAKT,SAAS,GAAGY,YAAY,GAAGH,OAAO;AACzD;AAEA;;;;;;AAMA,OAAM,SAAUI,GAAGA,CAACV,MAAW,EAAEC,IAAuB,EAAET,KAAU;EAChE,IAAIc,OAAO,GAAGN,MAAM;EAEpB,MAAME,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAGA,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC;EAE5D,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,OAAO,CAACU,MAAM,EAAE,EAAED,CAAC,EAAE;IACrC,IAAIA,CAAC,KAAKT,OAAO,CAACU,MAAM,GAAG,CAAC,EAAE;MAC1BN,OAAO,CAACJ,OAAO,CAACS,CAAC,CAAC,CAAC,GAAGnB,KAAK;KAC9B,MAAM;MACHc,OAAO,GAAGA,OAAO,CAACJ,OAAO,CAACS,CAAC,CAAC,CAAC;;;AAGzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}